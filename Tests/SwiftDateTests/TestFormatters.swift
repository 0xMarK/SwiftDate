//
//  TestFormatters.swift
//  SwiftDate
//
//  Created by Daniele Margutti on 19/06/2018.
//  Copyright Â© 2018 SwiftDate. All rights reserved.
//

import SwiftDate
import XCTest

class TestFormatters: XCTestCase {

	public func datesList() -> [String: [String: String]] {
		return [
			"2018-06-14T12:58:48+02:00": [

				"dotnet": "/Date(1528973928878+0200)/",
				"rss": "Thu, 14 Jun 2018 12:58:48 +0200",
				"rss_alt": "14 Jun 2018 12:58:48 +0200",
				"sql": "2018-06-14T12:58:48.878+02",
				"iso": "2018-06-14T12:58:48+02:00"
			],
			"2018-06-04T05:43:48+02:00": [

				"dotnet": "/Date(1528083828878+0200)/",
				"rss": "Mon, 4 Jun 2018 05:43:48 +0200",
				"rss_alt": "4 Jun 2018 05:43:48 +0200",
				"sql": "2018-06-04T05:43:48.878+02",
				"iso": "2018-06-04T05:43:48+02:00"
			],
			"2018-06-17T11:53:48+02:00": [

				"dotnet": "/Date(1529229228878+0200)/",
				"rss": "Sun, 17 Jun 2018 11:53:48 +0200",
				"rss_alt": "17 Jun 2018 11:53:48 +0200",
				"sql": "2018-06-17T11:53:48.878+02",
				"iso": "2018-06-17T11:53:48+02:00"
			],
			"2018-06-19T11:53:48+02:00": [

				"dotnet": "/Date(1529402028878+0200)/",
				"rss": "Tue, 19 Jun 2018 11:53:48 +0200",
				"rss_alt": "19 Jun 2018 11:53:48 +0200",
				"sql": "2018-06-19T11:53:48.878+02",
				"iso": "2018-06-19T11:53:48+02:00"
			],
			"2018-06-17T19:27:48+02:00": [

				"dotnet": "/Date(1529256468878+0200)/",
				"rss": "Sun, 17 Jun 2018 19:27:48 +0200",
				"rss_alt": "17 Jun 2018 19:27:48 +0200",
				"sql": "2018-06-17T19:27:48.878+02",
				"iso": "2018-06-17T19:27:48+02:00"
			],
			"2018-06-02T10:23:48+02:00": [

				"dotnet": "/Date(1527927828878+0200)/",
				"rss": "Sat, 2 Jun 2018 10:23:48 +0200",
				"rss_alt": "2 Jun 2018 10:23:48 +0200",
				"sql": "2018-06-02T10:23:48.878+02",
				"iso": "2018-06-02T10:23:48+02:00"
			],
			"2018-06-08T21:29:48+02:00": [

				"dotnet": "/Date(1528486188878+0200)/",
				"rss": "Fri, 8 Jun 2018 21:29:48 +0200",
				"rss_alt": "8 Jun 2018 21:29:48 +0200",
				"sql": "2018-06-08T21:29:48.878+02",
				"iso": "2018-06-08T21:29:48+02:00"
			],
			"2018-06-22T21:37:48+02:00": [

				"dotnet": "/Date(1529696268878+0200)/",
				"rss": "Fri, 22 Jun 2018 21:37:48 +0200",
				"rss_alt": "22 Jun 2018 21:37:48 +0200",
				"sql": "2018-06-22T21:37:48.878+02",
				"iso": "2018-06-22T21:37:48+02:00"
			],
			"2018-06-02T22:18:48+02:00": [

				"dotnet": "/Date(1527970728878+0200)/",
				"rss": "Sat, 2 Jun 2018 22:18:48 +0200",
				"rss_alt": "2 Jun 2018 22:18:48 +0200",
				"sql": "2018-06-02T22:18:48.878+02",
				"iso": "2018-06-02T22:18:48+02:00"
			],
			"2018-06-28T03:57:48+02:00": [

				"dotnet": "/Date(1530151068878+0200)/",
				"rss": "Thu, 28 Jun 2018 03:57:48 +0200",
				"rss_alt": "28 Jun 2018 03:57:48 +0200",
				"sql": "2018-06-28T03:57:48.878+02",
				"iso": "2018-06-28T03:57:48+02:00"
			],
			"2018-06-30T21:09:48+02:00": [

				"dotnet": "/Date(1530385788878+0200)/",
				"rss": "Sat, 30 Jun 2018 21:09:48 +0200",
				"rss_alt": "30 Jun 2018 21:09:48 +0200",
				"sql": "2018-06-30T21:09:48.878+02",
				"iso": "2018-06-30T21:09:48+02:00"
			],
			"2018-06-19T04:13:48+02:00": [

				"dotnet": "/Date(1529374428878+0200)/",
				"rss": "Tue, 19 Jun 2018 04:13:48 +0200",
				"rss_alt": "19 Jun 2018 04:13:48 +0200",
				"sql": "2018-06-19T04:13:48.878+02",
				"iso": "2018-06-19T04:13:48+02:00"
			],
			"2018-06-05T18:26:48+02:00": [

				"dotnet": "/Date(1528216008878+0200)/",
				"rss": "Tue, 5 Jun 2018 18:26:48 +0200",
				"rss_alt": "5 Jun 2018 18:26:48 +0200",
				"sql": "2018-06-05T18:26:48.878+02",
				"iso": "2018-06-05T18:26:48+02:00"
			],
			"2018-06-13T04:56:48+02:00": [

				"dotnet": "/Date(1528858608878+0200)/",
				"rss": "Wed, 13 Jun 2018 04:56:48 +0200",
				"rss_alt": "13 Jun 2018 04:56:48 +0200",
				"sql": "2018-06-13T04:56:48.878+02",
				"iso": "2018-06-13T04:56:48+02:00"
			],
			"2018-06-13T06:57:48+02:00": [

				"dotnet": "/Date(1528865868878+0200)/",
				"rss": "Wed, 13 Jun 2018 06:57:48 +0200",
				"rss_alt": "13 Jun 2018 06:57:48 +0200",
				"sql": "2018-06-13T06:57:48.878+02",
				"iso": "2018-06-13T06:57:48+02:00"
			],
			"2018-06-14T00:09:48+02:00": [

				"dotnet": "/Date(1528927788878+0200)/",
				"rss": "Thu, 14 Jun 2018 00:09:48 +0200",
				"rss_alt": "14 Jun 2018 00:09:48 +0200",
				"sql": "2018-06-14T00:09:48.878+02",
				"iso": "2018-06-14T00:09:48+02:00"
			],
			"2018-06-26T09:13:48+02:00": [

				"dotnet": "/Date(1529997228878+0200)/",
				"rss": "Tue, 26 Jun 2018 09:13:48 +0200",
				"rss_alt": "26 Jun 2018 09:13:48 +0200",
				"sql": "2018-06-26T09:13:48.878+02",
				"iso": "2018-06-26T09:13:48+02:00"
			],
			"2018-06-30T14:44:48+02:00": [

				"dotnet": "/Date(1530362688878+0200)/",
				"rss": "Sat, 30 Jun 2018 14:44:48 +0200",
				"rss_alt": "30 Jun 2018 14:44:48 +0200",
				"sql": "2018-06-30T14:44:48.878+02",
				"iso": "2018-06-30T14:44:48+02:00"
			],
			"2018-06-13T13:55:48+02:00": [

				"dotnet": "/Date(1528890948878+0200)/",
				"rss": "Wed, 13 Jun 2018 13:55:48 +0200",
				"rss_alt": "13 Jun 2018 13:55:48 +0200",
				"sql": "2018-06-13T13:55:48.878+02",
				"iso": "2018-06-13T13:55:48+02:00"
			],
			"2018-06-07T06:48:48+02:00": [

				"dotnet": "/Date(1528346928878+0200)/",
				"rss": "Thu, 7 Jun 2018 06:48:48 +0200",
				"rss_alt": "7 Jun 2018 06:48:48 +0200",
				"sql": "2018-06-07T06:48:48.878+02",
				"iso": "2018-06-07T06:48:48+02:00"
			],
			"2018-06-21T16:41:48+02:00": [

				"dotnet": "/Date(1529592108878+0200)/",
				"rss": "Thu, 21 Jun 2018 16:41:48 +0200",
				"rss_alt": "21 Jun 2018 16:41:48 +0200",
				"sql": "2018-06-21T16:41:48.878+02",
				"iso": "2018-06-21T16:41:48+02:00"
			],
			"2018-06-15T08:52:48+02:00": [

				"dotnet": "/Date(1529045568878+0200)/",
				"rss": "Fri, 15 Jun 2018 08:52:48 +0200",
				"rss_alt": "15 Jun 2018 08:52:48 +0200",
				"sql": "2018-06-15T08:52:48.878+02",
				"iso": "2018-06-15T08:52:48+02:00"
			],
			"2018-06-30T06:37:48+02:00": [

				"dotnet": "/Date(1530333468878+0200)/",
				"rss": "Sat, 30 Jun 2018 06:37:48 +0200",
				"rss_alt": "30 Jun 2018 06:37:48 +0200",
				"sql": "2018-06-30T06:37:48.878+02",
				"iso": "2018-06-30T06:37:48+02:00"
			],
			"2018-06-29T21:35:48+02:00": [

				"dotnet": "/Date(1530300948878+0200)/",
				"rss": "Fri, 29 Jun 2018 21:35:48 +0200",
				"rss_alt": "29 Jun 2018 21:35:48 +0200",
				"sql": "2018-06-29T21:35:48.878+02",
				"iso": "2018-06-29T21:35:48+02:00"
			],
			"2018-06-19T02:07:48+02:00": [

				"dotnet": "/Date(1529366868878+0200)/",
				"rss": "Tue, 19 Jun 2018 02:07:48 +0200",
				"rss_alt": "19 Jun 2018 02:07:48 +0200",
				"sql": "2018-06-19T02:07:48.878+02",
				"iso": "2018-06-19T02:07:48+02:00"
			],
			"2018-06-18T23:12:48+02:00": [

				"dotnet": "/Date(1529356368878+0200)/",
				"rss": "Mon, 18 Jun 2018 23:12:48 +0200",
				"rss_alt": "18 Jun 2018 23:12:48 +0200",
				"sql": "2018-06-18T23:12:48.878+02",
				"iso": "2018-06-18T23:12:48+02:00"
			],
			"2018-06-26T23:56:48+02:00": [

				"dotnet": "/Date(1530050208878+0200)/",
				"rss": "Tue, 26 Jun 2018 23:56:48 +0200",
				"rss_alt": "26 Jun 2018 23:56:48 +0200",
				"sql": "2018-06-26T23:56:48.878+02",
				"iso": "2018-06-26T23:56:48+02:00"
			],
			"2018-06-22T07:57:48+02:00": [

				"dotnet": "/Date(1529647068878+0200)/",
				"rss": "Fri, 22 Jun 2018 07:57:48 +0200",
				"rss_alt": "22 Jun 2018 07:57:48 +0200",
				"sql": "2018-06-22T07:57:48.878+02",
				"iso": "2018-06-22T07:57:48+02:00"
			],
			"2018-06-04T05:23:48+02:00": [

				"dotnet": "/Date(1528082628878+0200)/",
				"rss": "Mon, 4 Jun 2018 05:23:48 +0200",
				"rss_alt": "4 Jun 2018 05:23:48 +0200",
				"sql": "2018-06-04T05:23:48.878+02",
				"iso": "2018-06-04T05:23:48+02:00"
			],
			"2018-06-25T19:19:48+02:00": [

				"dotnet": "/Date(1529947188878+0200)/",
				"rss": "Mon, 25 Jun 2018 19:19:48 +0200",
				"rss_alt": "25 Jun 2018 19:19:48 +0200",
				"sql": "2018-06-25T19:19:48.878+02",
				"iso": "2018-06-25T19:19:48+02:00"
			],
			"2018-06-02T04:40:48+02:00": [

				"dotnet": "/Date(1527907248878+0200)/",
				"rss": "Sat, 2 Jun 2018 04:40:48 +0200",
				"rss_alt": "2 Jun 2018 04:40:48 +0200",
				"sql": "2018-06-02T04:40:48.878+02",
				"iso": "2018-06-02T04:40:48+02:00"
			],
			"2018-06-27T19:39:48+02:00": [

				"dotnet": "/Date(1530121188878+0200)/",
				"rss": "Wed, 27 Jun 2018 19:39:48 +0200",
				"rss_alt": "27 Jun 2018 19:39:48 +0200",
				"sql": "2018-06-27T19:39:48.878+02",
				"iso": "2018-06-27T19:39:48+02:00"
			],
			"2018-06-02T04:58:48+02:00": [

				"dotnet": "/Date(1527908328878+0200)/",
				"rss": "Sat, 2 Jun 2018 04:58:48 +0200",
				"rss_alt": "2 Jun 2018 04:58:48 +0200",
				"sql": "2018-06-02T04:58:48.878+02",
				"iso": "2018-06-02T04:58:48+02:00"
			],
			"2018-06-30T10:08:48+02:00": [

				"dotnet": "/Date(1530346128878+0200)/",
				"rss": "Sat, 30 Jun 2018 10:08:48 +0200",
				"rss_alt": "30 Jun 2018 10:08:48 +0200",
				"sql": "2018-06-30T10:08:48.878+02",
				"iso": "2018-06-30T10:08:48+02:00"
			],
			"2018-06-15T15:11:48+02:00": [

				"dotnet": "/Date(1529068308878+0200)/",
				"rss": "Fri, 15 Jun 2018 15:11:48 +0200",
				"rss_alt": "15 Jun 2018 15:11:48 +0200",
				"sql": "2018-06-15T15:11:48.878+02",
				"iso": "2018-06-15T15:11:48+02:00"
			],
			"2018-06-18T23:01:48+02:00": [

				"dotnet": "/Date(1529355708878+0200)/",
				"rss": "Mon, 18 Jun 2018 23:01:48 +0200",
				"rss_alt": "18 Jun 2018 23:01:48 +0200",
				"sql": "2018-06-18T23:01:48.878+02",
				"iso": "2018-06-18T23:01:48+02:00"
			],
			"2018-06-28T18:27:48+02:00": [

				"dotnet": "/Date(1530203268878+0200)/",
				"rss": "Thu, 28 Jun 2018 18:27:48 +0200",
				"rss_alt": "28 Jun 2018 18:27:48 +0200",
				"sql": "2018-06-28T18:27:48.878+02",
				"iso": "2018-06-28T18:27:48+02:00"
			],
			"2018-06-16T18:54:48+02:00": [

				"dotnet": "/Date(1529168088878+0200)/",
				"rss": "Sat, 16 Jun 2018 18:54:48 +0200",
				"rss_alt": "16 Jun 2018 18:54:48 +0200",
				"sql": "2018-06-16T18:54:48.878+02",
				"iso": "2018-06-16T18:54:48+02:00"
			],
			"2018-06-27T07:20:48+02:00": [

				"dotnet": "/Date(1530076848878+0200)/",
				"rss": "Wed, 27 Jun 2018 07:20:48 +0200",
				"rss_alt": "27 Jun 2018 07:20:48 +0200",
				"sql": "2018-06-27T07:20:48.878+02",
				"iso": "2018-06-27T07:20:48+02:00"
			],
			"2018-06-15T21:58:48+02:00": [

				"dotnet": "/Date(1529092728878+0200)/",
				"rss": "Fri, 15 Jun 2018 21:58:48 +0200",
				"rss_alt": "15 Jun 2018 21:58:48 +0200",
				"sql": "2018-06-15T21:58:48.878+02",
				"iso": "2018-06-15T21:58:48+02:00"
			]
		]
	}

	/*public func testFormatters() {
		var total = ""
		let randomDates = DateInRegion.randomDatesInPast(count: 40, days: 2000)
		randomDates.forEach {
			total += "\"\($0.toISO())\" : [\n\t"
			total += "\n\t" + "\"dotnet\": \"\($0.toDotNET())\","
			total += "\n\t" + "\"rss\": \"\($0.toRSS(alt: false))\","
			total += "\n\t" + "\"rss_alt\": \"\($0.toRSS(alt: true))\","
			total += "\n\t" + "\"sql\": \"\($0.toSQL())\","
			total += "\n\t" + "\"iso\": \"\($0.toISO())\""
			total += "\n],\n"
		}
		print("\(total)")
	}*/

	public func testFormatters() {
		SwiftDate.defaultRegion = Region(calendar: Calendars.gregorian, zone: Zones.europeRome, locale: Locales.italian)
		self.datesList().forEach {
			XCTTestFormatterParser(dateStr: $0.key, expected: $0.value["dotnet"]!, type: "dotnet")
			XCTTestFormatterParser(dateStr: $0.key, expected: $0.value["rss"]!, type: "rss")
			XCTTestFormatterParser(dateStr: $0.key, expected: $0.value["rss_alt"]!, type: "rss_alt")
			XCTTestFormatterParser(dateStr: $0.key, expected: $0.value["sql"]!, type: "sql")
			XCTTestFormatterParser(dateStr: $0.key, expected: $0.value["iso"]!, type: "iso")
		}
	}

	func XCTTestFormatterParser(dateStr: String, expected: String, type: String) {
		guard let srcDate = dateStr.toDate("yyyy-MM-dd'T'HH:mm:ssZZZZZ", region: SwiftDate.defaultRegion) else {
			XCTFail("Failed to correctly parse date: '\(dateStr)'")
			return
		}

		var dateAsStr: String!
		switch type {
		case "dotnet":
			dateAsStr = srcDate.toDotNET()
		case "rss":
			dateAsStr = srcDate.toRSS(alt: false)
		case "rss_alt":
			dateAsStr = srcDate.toRSS(alt: true)
		case "sql":
			dateAsStr = srcDate.toSQL()
		case "iso":
			dateAsStr = srcDate.toISO()
		default:
			fatalError("Unsupported test type: \(type)")
		}
		XCTAssert( (dateAsStr == expected), "Failed to convert date '\(srcDate.description)' to \(type) format. Expected '\(expected)', got '\(dateAsStr!)'")
		let decodedSrcDate = dateAsStr.toDotNETDate()
		XCTAssert( (srcDate == decodedSrcDate), "Failed to convert dot net date to valid Date")
	}

}
